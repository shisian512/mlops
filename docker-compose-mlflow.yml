services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mlops
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # MinIO Web UI: http://localhost:9002
  minio:
    image: minio/minio
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: "${AWS_ACCESS_KEY_ID}"
      MINIO_ROOT_PASSWORD: "${AWS_SECRET_ACCESS_KEY}"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "9000:9000"
      - "9002:9002"
    networks:
      - mlops

  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
      if ! mc ls minio/bucket; then
        mc mb minio/bucket
      else
        echo 'bucket already exists'
      fi
      "
    networks:
      - mlops

  mlflow:
    build:
      context: ./docker
      dockerfile: Dockerfile.mlflow
    command: >
      mlflow server
      --backend-store-uri ${POSTGRES_URI}
      --artifacts-destination ${MLFLOW_ARTIFACTS_URI}
      --host 0.0.0.0
      --port 5000
    depends_on:
      - postgres
      - minio
    ports:
      - "5000:5000"
    env_file:
      - .env
    networks:
      - mlops

volumes:
  postgres_data:
  minio_data:

networks:
  mlops:
    driver: bridge